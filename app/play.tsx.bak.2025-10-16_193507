import { isStopActive } from '@/src/engine/conductor';
import React, { useMemo, useState } from 'react';
import { View, Text, Pressable } from 'react-native';
import { useLocalSearchParams, useRouter, Link } from 'expo-router';
import { publishMeters, getMetersSnapshot } from '@/src/lib/progressBus';
import { getRouteState } from '@/src/state/route';
import { getBankKeys, loadBank, pickRound } from '@/src/banks/adapter';
import { POINTS_PER_CORRECT } from '@/src/config/game';

type QA = { q: string; a: string; choices: string[] };

export default function Play() {
  const router = useRouter();
  const { cat } = useLocalSearchParams<{ cat?: string }>();

  
  if (isStopActive()) { router.replace('/stop'); return <View style={{flex:1,backgroundColor:'#111'}} />; }

const keys = getBankKeys();
  const requested = (cat as string) || (keys[0] ?? 'general');
  const bankKey = keys.includes(requested) ? requested : (keys[0] ?? 'general');

  const bank = useMemo<QA[]>(() => loadBank(bankKey), [bankKey]);
  const round = useMemo<QA[]>(() => pickRound(bank, 5), [bankKey, bank.length]);

  const [idx, setIdx] = useState(0);
  const [correct, setCorrect] = useState(0);
  const total = round.length;

  if (total === 0) {
    return (
      <View style={{ flex: 1, backgroundColor: '#111', padding: 24 }}>

      
        <Text style={{ color: 'white', fontSize: 18, fontWeight: '700' }}>Ingen spørsmål i «{bankKey}»</Text>
        <Text style={{ color: '#9ca3af', marginTop: 6 }}>Kategorier: {keys.join(', ') || '(ingen)'}</Text>
        <Link href="/start" style={{ color: '#60a5fa', marginTop: 16 }}>Til start</Link>
      </View>
    );
  }

  const q = round[idx];

  const onAnswer = (choice: string) => {
    const good = choice === q.a;
    if (good) setCorrect((c) => c + 1);
    const next = idx + 1;
    if (next < total) {
      setIdx(next);
    } else {
      const finalCorrect = good ? correct + 1 : correct;
      const meters = finalCorrect * POINTS_PER_CORRECT;
      router.replace(`/results?correct=${finalCorrect}&total=${total}&cat=${bankKey}&meters=${meters}`);
    }
  };

  return (
    <View style={{ flex: 1, backgroundColor: '#111', padding: 24, gap: 16, justifyContent: 'center' }}>
      <Text style={{ color: '#9ca3af' }}>Velg kategori:</Text>
      <View style={{ flexDirection: 'row', gap: 8, flexWrap: 'wrap' }}>
        {keys.map(k => (
          <Pressable key={k} onPress={() => router.replace(`/play?cat=${k}`)}
            style={{ backgroundColor: k===bankKey ? '#60a5fa' : '#e5e7eb', paddingVertical: 8, paddingHorizontal: 12, borderRadius: 999 }}>
            <Text style={{ color: k===bankKey ? 'white' : 'black', fontWeight: '700' }}>{k}</Text>
          </Pressable>
        ))}
      </View>

      <Text style={{ color: '#60a5fa', fontWeight: '700' }}>{bankKey.toUpperCase()}</Text>
      <Text style={{ color: 'white', fontSize: 20, fontWeight: '700' }}>{q.q}</Text>
      <View style={{ gap: 10 }}>
        {q.choices.map((c) => (
          <Pressable key={c} onPress={() => onAnswer(c)} style={{ backgroundColor: '#e5e7eb', padding: 14, borderRadius: 12 }}>
            <Text>{c}</Text>
          </Pressable>
        ))}
      </View>
      <Text style={{ color: '#bbb' }}>{idx + 1} / {total}</Text>
      <Link href="/start" style={{ color: '#60a5fa' }}>Avbryt</Link>
    </View>
  );
}
