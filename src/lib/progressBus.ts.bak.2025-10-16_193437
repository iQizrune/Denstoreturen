type Payload = { meters: number; ts?: number };
type Listener = (d: Payload) => void;

const subs = new Set<Listener>();
let __metersSnapshot = 0;

export function publishMeters(meters: number) {
  if (!Number.isFinite(meters)) return;
  __metersSnapshot = meters;
  const d: Payload = { meters, ts: Date.now() };
  subs.forEach(fn => fn(d));
}

export function subscribeMeters(fn: Listener) {
  subs.add(fn);
  return () => { subs.delete(fn); };
}

export function onMeters(fn: Listener) {
  return subscribeMeters(fn);
}

export function getMetersSnapshot(): number {
  return __metersSnapshot;
}
